/*----------------------------------*/
/*----------- ACTIVITE 2 -----------*/
/*----------------------------------*/


/*------------ FONCTION ------------*/
DELIMITER //
CREATE FUNCTION joueurs_match (ID_MAT INT) RETURNS TEXT
BEGIN
	SELECT GROUP_CONCAT(JOU_PSEUDO) INTO @LISTE FROM T_JOUEUR_JOU WHERE MAT_ID=ID_MAT;
	IF @LISTE IS NULL THEN
		SET @LISTE := "Aucun joueur n'a participé à ce match";
    END IF;
	RETURN @LISTE;
END;
//
DELIMITER ;


/*----------- PROCEDURE -----------*/
DELIMITER //
CREATE PROCEDURE actualite_match (IN ID_MAT INT)
BEGIN
	SET @fin := (SELECT MAT_FIN FROM T_MATCH_MAT WHERE MAT_ID=ID_MAT);
	SET @dbt := (SELECT MAT_DEBUT FROM T_MATCH_MAT WHERE MAT_ID=ID_MAT);
	SET @joueurs := (SELECT joueurs_match(ID_MAT));
	SET @intitule := (SELECT QUI_INTITULE FROM T_QUIZ_QUI JOIN T_MATCH_MAT USING (QUI_ID) WHERE MAT_ID=ID_MAT);
	SET @titre = CONCAT("Fin d'un match sur le quiz ",@intitule);
	SET @contenu = CONCAT("Un match sur le quiz ",@intitule," s\'est terminé.\nDEBUT: ",@dbt,"\nFIN: ",@fin,"\nLes joueurs ayant participés au match sont : ",@joueurs);
	IF (@fin<NOW() AND @fin IS NOT NULL) THEN
			INSERT INTO T_ACTUALITE_ACT VALUES (NULL,1,@titre,@contenu,NOW());
	END IF;
END;
//
DELIMITER ;

/*APRES REFLEXION : EN TESTANT QUE @fin IS NOT NULL DANS LA PROCEDURE, ET NOTRE TRIGGER FONCTIONNANT AVEC LA DESACTIVATION
 DU MATCH, L'ACTUALITE NE SERA PAS FAITE SI LE MATCH EST DESACTIVE MAIS QUE LA FIN EST A NULL
 -> TRIGGER : FIN A NOW SI DESACTIVATION DU MATCH ?

 FAIRE FONCTIONNER LE TRIGGER SUR LA DATE DE FIN : AFTER UPDATE ON T_MATCH_MAT ... IF (NEW.FIN=NOW())



/*------------ TRIGGER ------------*/
/*UNE FOIS LE MATCH FINI, IL EST DÉSACTIVÉ (LES JOUEURS N'Y ONT PLUS ACCÈS, UNE ACTUALITE SERA AJOUTEE SI LA DATE DE FIN EST PASSEE)*/
DELIMITER //
CREATE TRIGGER fin_match_actu
AFTER UPDATE ON T_MATCH_MAT
FOR EACH ROW
BEGIN
	IF(OLD.MAT_ACTIF=1 AND NEW.MAT_ACTIF=0) THEN
		CALL actualite_match(NEW.MAT_ID);
	END IF;
END;
//
DELIMITER ;

/*--- Trigger en utilisant date de fin ---*/
DELIMITER //
CREATE TRIGGER fin_match_actu_bis
AFTER UPDATE ON T_MATCH_MAT
FOR EACH ROW
BEGIN
	IF((OLD.MAT_FIN>NOW() OR OLD.MAT_FIN IS NULL) AND NEW.MAT_FIN<NOW()) THEN
		CALL actualite_match(NEW.MAT_ID);
	END IF;
END;
//
DELIMITER ;


/*----------------------------------*/
/*----------- ACTIVITE 3 -----------*/
/*----------------------------------*/
DELIMITER //
CREATE PROCEDURE nbr_matchs ()
BEGIN
	SET @Matchs_en_cours := (SELECT COUNT(MAT_ID) FROM T_MATCH_MAT WHERE MAT_DEBUT<CURDATE() AND MAT_FIN>CURDATE() AND MAT_DEBUT IS NOT NULL AND MAT_FIN IS NOT NULL);
	SET @Matchs_finis := (SELECT COUNT(MAT_ID) FROM T_MATCH_MAT WHERE MAT_FIN<CURDATE() AND MAT_FIN IS NOT NULL);
	SET @Matchs_a_venir := (SELECT COUNT(MAT_ID) FROM T_MATCH_MAT WHERE MAT_DEBUT>CURDATE() AND MAT_DEBUT IS NOT NULL);
	SELECT @Matchs_a_venir, @Matchs_en_cours, @Matchs_finis;
END;
//
DELIMITER ;

/* OUBLI DES MATCHS A VENIR AVEC DEBUT A NULL DANS LA PREMIERE VERSION OU EN COURS MAIS FIN A NULL*/
DELIMITER //
CREATE PROCEDURE nbr_matchs_bis ()
BEGIN
	SET @Matchs_en_cours := (SELECT COUNT(MAT_ID) FROM T_MATCH_MAT WHERE MAT_DEBUT<CURDATE() AND MAT_FIN>CURDATE() AND MAT_DEBUT IS NOT NULL AND MAT_FIN IS NOT NULL);
	SET @Matchs_finis := (SELECT COUNT(MAT_ID) FROM T_MATCH_MAT WHERE MAT_FIN<CURDATE() AND MAT_FIN IS NOT NULL);
	SET @Matchs_a_venir := (SELECT COUNT(MAT_ID) FROM T_MATCH_MAT WHERE MAT_DEBUT>CURDATE() OR MAT_DEBUT IS NULL);
	SELECT @Matchs_a_venir, @Matchs_en_cours, @Matchs_finis;
END;
//
DELIMITER ;


/*seule dans la base, appelée nbr_matchs dans bdd*/
DELIMITER //
CREATE PROCEDURE nbr_matchs_tres ()
BEGIN
	SET @Matchs_en_cours := (SELECT COUNT(MAT_ID) FROM T_MATCH_MAT WHERE MAT_DEBUT<NOW() AND MAT_DEBUT IS NOT NULL AND (MAT_FIN>NOW() OR MAT_FIN IS NULL));
	SET @Matchs_finis := (SELECT COUNT(MAT_ID) FROM T_MATCH_MAT WHERE MAT_FIN<NOW() AND MAT_FIN IS NOT NULL);
	SET @Matchs_a_venir := (SELECT COUNT(MAT_ID) FROM T_MATCH_MAT WHERE MAT_DEBUT>NOW() OR MAT_DEBUT IS NULL);
	SELECT @Matchs_a_venir, @Matchs_en_cours, @Matchs_finis;
END;
//
DELIMITER ;
